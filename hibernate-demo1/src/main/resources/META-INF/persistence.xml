<?xml version="1.0" encoding="UTF-8"?>
<persistence xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence
	             http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd" version="2.1">
	<!-- This name can be anything -->
	<persistence-unit name="EmployeeDBUnit">

		<class>com.hcl.cong.hibernate1.hibernate_demo1.Employee</class>

		<properties>
			<property name="javax.persistence.jdbc.url" value="jdbc:mysql://localhost:3306/hibernatedemo" />
			<property name="javax.persistence.jdbc.user" value="root" />
			<property name="javax.persistence.jdbc.password" value="admin" />
			<property name="javax.persistence.jdbc.driver" value="com.mysql.jdbc.Driver" />
			<!--"none" means do nothing ... so do like JPA has always done things 
				i.e just persistence. It isn't there to "serve any purpose", just to not 
				do anything extra! -->
			<!-- "create" means create the tables for the entities (so it is assumed 
				to not exist yet). Clearly most JPA providers will check existence of tables 
				before creation, so it won't "fail on subsequent uses". -->
			<!-- "drop" means drop the tables for the entities (so when running as 
				stand alone process, clean up after tests for example). -->
			<!-- "drop-and-create" drop and create the tables for the entities, so 
				get rid of what was there and start from scratch. Nothing to do with persisting 
				data, but then none of these options are. -->
			<property name="javax.persistence.schema-generation.database.action" value="drop-and-create" />

			<property name="hibernate.show_sql" value="true" />
			<property name="hibernate.format_sql" value="true" />
		</properties>
	</persistence-unit>
</persistence>